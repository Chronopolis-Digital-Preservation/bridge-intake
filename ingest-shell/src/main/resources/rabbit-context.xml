<!--
We don't really need this file anymore, but I'll leave it here just in case.

Will probably be removed at some point in the near future assuming all goes well.
-->

<!--
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
                       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                       ">


<bean id="dataSource"
      class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="org.h2.Driver"/>
    <property name="url" value="jdbc:h2:test-db"/>
    <property name="username" value="h2"/>
    <property name="password" value="h2"/>
</bean>

<bean id="entityManagerFactory"
      class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="jpaVendorAdapter">
        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            <property name="generateDdl" value="true"/>
            <property name="database" value="H2"/>
        </bean>
    </property>
    <property name="packagesToScan" value="org.chronopolis.db.model"/>
</bean>

<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory"/>
</bean>

<jpa:repositories base-package="org.chronopolis.db"/>

<bean id="databaseManager" class="org.chronopolis.db.DatabaseManager">
</bean>


<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
        <list>
            <value>classpath:ingest.properties</value>
            <value>file:ingest.properties</value>
        </list>
    </property>
</bean>

<bean id="properties" class="org.chronopolis.ingest.IngestProperties">
    <constructor-arg value="${nodeName}"/>
    <constructor-arg value="${stage}"/>
    <constructor-arg value="${exchange}"/>
    <constructor-arg value="${inboundRoutingKey}"/>
    <constructor-arg value="${ingestBroadcastRoutingKey}"/>
    <constructor-arg value="${tokenStage}" />
    <constructor-arg value="${imsHostName}"/>
    <constructor-arg value="${storageServer}"/>
    <constructor-arg value="${externalUser}"/>
    <constructor-arg value="${dpnPush}"/>
</bean>

<bean id="rabbitConnectionFactory" class="com.rabbitmq.client.ConnectionFactory">
    <property name="requestedHeartbeat" value="60"/>
    <property name="connectionTimeout" value="300"/>
    <property name="virtualHost" value="chronopolis"/>
</bean>

<bean id="connectionFactory"
      class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
    <constructor-arg ref="rabbitConnectionFactory"/>
    <property name="publisherConfirms" value="true"/>
    <property name="publisherReturns" value="true"/>
    <property name="connectionListeners">
        <list>
            <bean class="org.chronopolis.amqp.ConnectionListenerImpl"/>
        </list>
    </property>
    <property name="addresses" value="adapt-mq.umiacs.umd.edu"/>
</bean>

<rabbit:admin connection-factory="connectionFactory"/>

<!Set up our queues and bindings in the exchange >
<rabbit:queue id="queue.test" name="${queue.test.name}" durable="true"/>
<rabbit:queue id="queue.broadcast" name="${queue.broadcast.name}" durable="true"/>
<rabbit:queue id="queue.direct-ingest" name="${queue.direct-ingest.name}" durable="true"/>

<rabbit:topic-exchange id="federatedExchange" name="chronopolis-control">
    <rabbit:bindings>
        <rabbit:binding queue="queue.test" pattern="${queue.test.pattern}"/>
        <rabbit:binding queue="queue.broadcast" pattern="${queue.broadcast.pattern}"/>
        <rabbit:binding queue="queue.direct-ingest" pattern="${queue.direct-ingest.pattern}"/>
    </rabbit:bindings>
</rabbit:topic-exchange>

<bean id="messageFactory" class="org.chronopolis.messaging.factory.MessageFactory">
    <constructor-arg ref="properties"/>
</bean>

<bean id="packageReadyProcessor" class="org.chronopolis.ingest.processor.PackageReadyProcessor">
    <constructor-arg ref="producer"/>
    <constructor-arg ref="properties"/>
    <constructor-arg ref="messageFactory"/>
</bean>
<bean id="packageStatusProcessor" class="org.chronopolis.ingest.processor.PackageIngestStatusQueryProcessor">
    <constructor-arg ref="producer"/>
</bean>
<bean id="collectionInitCompleteProcessor" class="org.chronopolis.ingest.processor.CollectionInitCompleteProcessor">
    <constructor-arg ref="producer"/>
    <constructor-arg ref="messageFactory"/>
</bean>

<bean id="msgListener" class="org.chronopolis.ingest.IngestMessageListener">
    <constructor-arg ref="packageStatusProcessor"/>
    <constructor-arg ref="packageReadyProcessor"/>
    <constructor-arg ref="collectionInitCompleteProcessor"/>
</bean>

<bean id="errorHandler" class="org.chronopolis.amqp.error.ErrorHandlerImpl"/>

<rabbit:listener-container connection-factory="connectionFactory"
                           error-handler="errorHandler">
    <rabbit:listener ref="msgListener"
                 queues="queue.test,queue.broadcast,queue.direct-ingest"/>
</rabbit:listener-container>

<rabbit:template id="rabbitTemplate" exchange="chronopolis-control"
                 connection-factory="connectionFactory"
                 mandatory="true" />

confirm-callback="confirmCallback"
return-callback=""/>

<bean id="producer" class="org.chronopolis.amqp.TopicProducer">
    <constructor-arg index="0" ref="rabbitTemplate"/>
</bean>
</beans>
-->

